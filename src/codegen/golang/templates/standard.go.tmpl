// Code generated by enumgen. DO NOT EDIT.
//
// This file was generated by enumgen.
// Tool Version: {{ .ToolVersion }}
// EDL Version:  {{ .EDLVersion }}

package {{ .Package }}

import (
	"fmt"
	{{- if .GenerateJSON }}
	"encoding/json"
	{{- end }}
)

// {{ .EnumName }} represents a key-value enumeration.
// The generator ensures that all enums, even single-type ones, are treated as key-value pairs.
// {{ .EnumDoc }}
type {{ .EnumName }} struct {
	key   {{ .KeyType }}
	value {{ .ValueType }}
}

// Enum members
var (
	{{- range $m := .Members }}
	// {{ $m.Name }} represents the key '{{ $m.Key }}' and value '{{ $m.Value }}'.
	// {{ $m.Doc }}
	{{ $m.Name }} = {{ $.EnumName }}{
		key:   {{ printf "%#v" $m.Key }},
		value: {{ printf "%#v" $m.Value }},
	}
	{{- end }}
)

// -- Lookups --

var (
	// {{ .EnumName }}KeyMap provides a lookup from the key to the enum member.
	{{ .EnumName }}KeyMap = map[{{ .KeyType }}]{{ .EnumName }}{
		{{- range $m := .Members }}
		{{ printf "%#v" $m.Key }}: {{ $m.Name }},
		{{- end }}
	}

	// {{ .EnumName }}ValueMap provides a lookup from the value to the enum member.
	{{ .EnumName }}ValueMap = map[{{ .ValueType }}]{{ .EnumName }}{
		{{- range $m := .Members }}
		{{ printf "%#v" $m.Value }}: {{ $m.Name }},
		{{- end }}
	}
)

// -- Parsers --

// Parse{{ .EnumName }}Key attempts to parse the given key into a valid {{ .EnumName }} enum member.
func Parse{{ .EnumName }}Key(key {{ .KeyType }}) ({{ .EnumName }}, error) {
	if v, ok := {{ .EnumName }}KeyMap[key]; ok {
		return v, nil
	}
	return {{ .EnumName }}{}, fmt.Errorf("invalid {{ .EnumName }} key: %v", key)
}

// Parse{{ .EnumName }}Value attempts to parse the given value into a valid {{ .EnumName }} enum member.
func Parse{{ .EnumName }}Value(val {{ .ValueType }}) ({{ .EnumName }}, error) {
	if v, ok := {{ .EnumName }}ValueMap[val]; ok {
		return v, nil
	}
	return {{ .EnumName }}{}, fmt.Errorf("invalid {{ .EnumName }} value: %v", val)
}

// -- Accessors --

// Key returns the key of the enum member.
func (e {{ .EnumName }}) Key() {{ .KeyType }} {
	return e.key
}

// Value returns the value of the enum member.
func (e {{ .EnumName }}) Value() {{ .ValueType }} {
	return e.value
}

// -- Interfaces --

{{- if .GenerateStringer }}
// String returns the string representation of the enum's key.
func (e {{ .EnumName }}) String() string {
	return fmt.Sprintf("%v", e.key)
}
{{- end }}

{{- if .GenerateJSON }}
// MarshalJSON marshals the enum member to its key representation.
func (e {{ .EnumName }}) MarshalJSON() ([]byte, error) {
	return json.Marshal(e.key)
}

// UnmarshalJSON unmarshals a key representation into an enum member.
func (e *{{ .EnumName }}) UnmarshalJSON(data []byte) error {
	var k {{ .KeyType }}
	if err := json.Unmarshal(data, &k); err != nil {
		return fmt.Errorf("{{ .EnumName }} should be a %T, got %s", k, data)
	}

	v, err := Parse{{ .EnumName }}Key(k)
	if err != nil {
		return err
	}
	*e = v
	return nil
}
{{- end }}